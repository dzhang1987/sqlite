#
#   sqlite-windows-static.nmake -- Makefile to build SQLite Library for windows
#

NAME                  = sqlite
VERSION               = 1.0.2

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = static
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

LBIN                  = $(CONFIG)\bin


ME_EXT_COMPILER_PATH  = cl
ME_EXT_LIB_PATH       = lib.exe
ME_EXT_LINK_PATH      = link.exe
ME_EXT_RC_PATH        = rc.exe
ME_EXT_VXWORKS_PATH   = $(WIND_BASE)

CC                    = cl
LD                    = link
RC                    = rc
CFLAGS                = -nologo -GR- -W3  -MD
DFLAGS                = -D_REENTRANT -D_MT 
IFLAGS                = -I$(CONFIG)\inc
LDFLAGS               = -nologo -nodefaultlib -incremental:no -machine:$(ARCH)
LIBPATHS              = "-libpath:$(CONFIG)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\SQLite Library
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src


TARGETS               = $(TARGETS) $(CONFIG)\bin\libsql.lib

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(CONFIG)\bin md $(CONFIG)\bin
	@if not exist $(CONFIG)\inc md $(CONFIG)\inc
	@if not exist $(CONFIG)\obj md $(CONFIG)\obj
	@if not exist $(CONFIG)\inc\me.h copy projects\sqlite-windows-static-me.h $(CONFIG)\inc\me.h

clean:
	if exist "$(CONFIG)\bin\libsql.lib" del /Q "$(CONFIG)\bin\libsql.lib"
	if exist "$(CONFIG)\obj\sqlite.obj" del /Q "$(CONFIG)\obj\sqlite.obj"
	if exist "$(CONFIG)\obj\sqlite3.obj" del /Q "$(CONFIG)\obj\sqlite3.obj"



#
#   version
#
version: $(DEPS_1)
	echo 1.0.2

#
#   sqlite3.h
#
$(CONFIG)\inc\sqlite3.h: $(DEPS_2)
	@echo '      [Copy] $(CONFIG)/inc/sqlite3.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\sqlite3.h $(CONFIG)\inc\sqlite3.h

#
#   me.h
#
$(CONFIG)\inc\me.h: $(DEPS_3)
	@echo '      [Copy] $(CONFIG)/inc/me.h'

#
#   sqlite.obj
#
DEPS_4 = $(DEPS_4) $(CONFIG)\inc\me.h
DEPS_4 = $(DEPS_4) $(CONFIG)\inc\sqlite3.h

$(CONFIG)\obj\sqlite.obj: \
    src\sqlite.c $(DEPS_4)
	@echo '   [Compile] $(CONFIG)/obj/sqlite.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\sqlite.obj -Fd$(CONFIG)\obj\sqlite.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\sqlite.c

#
#   sqlite3.obj
#
DEPS_5 = $(DEPS_5) $(CONFIG)\inc\me.h
DEPS_5 = $(DEPS_5) $(CONFIG)\inc\sqlite3.h

$(CONFIG)\obj\sqlite3.obj: \
    src\sqlite3.c $(DEPS_5)
	@echo '   [Compile] $(CONFIG)/obj/sqlite3.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\sqlite3.obj -Fd$(CONFIG)\obj\sqlite3.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\sqlite3.c

#
#   libsql
#
DEPS_6 = $(DEPS_6) $(CONFIG)\inc\sqlite3.h
DEPS_6 = $(DEPS_6) $(CONFIG)\inc\me.h
DEPS_6 = $(DEPS_6) $(CONFIG)\obj\sqlite.obj
DEPS_6 = $(DEPS_6) $(CONFIG)\obj\sqlite3.obj

$(CONFIG)\bin\libsql.lib: $(DEPS_6)
	@echo '      [Link] $(CONFIG)/bin/libsql.lib'
	"lib.exe" -nologo -out:$(CONFIG)\bin\libsql.lib "$(CONFIG)\obj\sqlite.obj" "$(CONFIG)\obj\sqlite3.obj"

#
#   stop
#
stop: $(DEPS_7)
#  Omit build script stop

#
#   installBinary
#
installBinary: $(DEPS_8)
#  Omit build script installBinary

#
#   start
#
start: $(DEPS_9)
#  Omit build script start

#
#   install
#
DEPS_10 = $(DEPS_10) stop
DEPS_10 = $(DEPS_10) installBinary
DEPS_10 = $(DEPS_10) start

install: $(DEPS_10)
#  Omit build script install

#
#   uninstall
#
DEPS_11 = $(DEPS_11) stop

uninstall: $(DEPS_11)
#  Omit build script uninstall

