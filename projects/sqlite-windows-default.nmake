#
#   sqlite-windows-default.nmake -- Makefile to build SQLite Library for windows
#

NAME                  = sqlite
VERSION               = 1.0.2

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = default
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

!IF "$(BUILD)" == ""
BUILD                 = build\$(CONFIG)
!ENDIF

LBIN                  = $(BUILD)\bin

!IF "$(ME_COM_SQLITE)" == ""
ME_COM_SQLITE         = 1
!ENDIF
!IF "$(ME_COM_VXWORKS)" == ""
ME_COM_VXWORKS        = 0
!ENDIF


ME_COM_COMPILER_PATH  = cl
ME_COM_LIB_PATH       = lib.exe
ME_COM_LINK_PATH      = link.exe
ME_COM_RC_PATH        = rc.exe

CC                    = cl
LD                    = link
RC                    = rc
CFLAGS                = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS                = -D_REENTRANT -D_MT -DME_COM_SQLITE=$(ME_COM_SQLITE) -DME_COM_VXWORKS=$(ME_COM_VXWORKS) 
IFLAGS                = -Ibuild\$(CONFIG)\inc
LDFLAGS               = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS              = "-libpath:build\$(CONFIG)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\SQLite Library
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src


!IF "$(ME_COM_SQLITE)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libsql.dll
!ENDIF

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(BUILD)\bin md $(BUILD)\bin
	@if not exist $(BUILD)\inc md $(BUILD)\inc
	@if not exist $(BUILD)\obj md $(BUILD)\obj
	@if not exist $(BUILD)\inc\me.h copy projects\sqlite-windows-default-me.h $(BUILD)\inc\me.h

clean:
	if exist "build\$(CONFIG)\obj\sqlite.obj" del /Q "build\$(CONFIG)\obj\sqlite.obj"
	if exist "build\$(CONFIG)\obj\sqlite3.obj" del /Q "build\$(CONFIG)\obj\sqlite3.obj"
	if exist "build\$(CONFIG)\bin\libsql.dll" del /Q "build\$(CONFIG)\bin\libsql.dll"
	if exist "build\$(CONFIG)\bin\libsql.lib" del /Q "build\$(CONFIG)\bin\libsql.lib"
	if exist "build\$(CONFIG)\bin\libsql.pdb" del /Q "build\$(CONFIG)\bin\libsql.pdb"
	if exist "build\$(CONFIG)\bin\libsql.exp" del /Q "build\$(CONFIG)\bin\libsql.exp"



#
#   sqlite3.h
#
build\$(CONFIG)\inc\sqlite3.h: $(DEPS_1)
	@echo '      [Copy] build/$(CONFIG)/inc/sqlite3.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\sqlite3.h build\$(CONFIG)\inc\sqlite3.h

#
#   me.h
#
build\$(CONFIG)\inc\me.h: $(DEPS_2)
	@echo '      [Copy] build/$(CONFIG)/inc/me.h'

#
#   sqlite.obj
#
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\me.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\sqlite3.h

build\$(CONFIG)\obj\sqlite.obj: \
    src\sqlite.c $(DEPS_3)
	@echo '   [Compile] build/$(CONFIG)/obj/sqlite.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\sqlite.obj -Fdbuild\$(CONFIG)\obj\sqlite.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\sqlite.c

#
#   sqlite3.obj
#
DEPS_4 = $(DEPS_4) build\$(CONFIG)\inc\me.h
DEPS_4 = $(DEPS_4) build\$(CONFIG)\inc\sqlite3.h

build\$(CONFIG)\obj\sqlite3.obj: \
    src\sqlite3.c $(DEPS_4)
	@echo '   [Compile] build/$(CONFIG)/obj/sqlite3.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\sqlite3.obj -Fdbuild\$(CONFIG)\obj\sqlite3.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\sqlite3.c

!IF "$(ME_COM_SQLITE)" == "1"
#
#   libsql
#
DEPS_5 = $(DEPS_5) build\$(CONFIG)\inc\sqlite3.h
DEPS_5 = $(DEPS_5) build\$(CONFIG)\inc\me.h
DEPS_5 = $(DEPS_5) build\$(CONFIG)\obj\sqlite.obj
DEPS_5 = $(DEPS_5) build\$(CONFIG)\obj\sqlite3.obj

build\$(CONFIG)\bin\libsql.dll: $(DEPS_5)
	@echo '      [Link] build/$(CONFIG)/bin/libsql.dll'
	"$(LD)" -dll -out:build\$(CONFIG)\bin\libsql.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "build\$(CONFIG)\obj\sqlite.obj" "build\$(CONFIG)\obj\sqlite3.obj" $(LIBS) 
!ENDIF

#
#   stop
#
stop: $(DEPS_6)
#  Omit build script stop

#
#   installBinary
#
installBinary: $(DEPS_7)
#  Omit build script installBinary

#
#   start
#
start: $(DEPS_8)
#  Omit build script start

#
#   install
#
DEPS_9 = $(DEPS_9) stop
DEPS_9 = $(DEPS_9) installBinary
DEPS_9 = $(DEPS_9) start

install: $(DEPS_9)
#  Omit build script install

#
#   uninstall
#
DEPS_10 = $(DEPS_10) stop

uninstall: $(DEPS_10)
#  Omit build script uninstall

#
#   version
#
version: $(DEPS_11)
	echo 1.0.2

