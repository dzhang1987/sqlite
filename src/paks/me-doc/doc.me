/*
    doc.me --make-doc targets
 */

Me.load({

    '+modules': [
        'doc.es',
    ],

    internal: {
        platforms: [ 'local' ],
    },

    settings: {
        depth: App.getenv('BUILD_DEPTH') || 1,
    },

    targets: {
        doc: {
            depends: ['patch', 'manpages', 'api', 'clean-doc', 'ssi'],
        },

        'patch': {},
        'api': {},
        'clean-doc': {},

        manpages: {
            depends: ['all'],
            action: "
                for each (file in ls(['${SRC}/doc/man/*.1', '${SRC}/doc/man/*.3'])) {
                    let name = file.basename
                    trace('Generate', 'Manual page for ' + name)
                    if (me.extensions.man.path && me.extensions.man2html.path) {
                        let response = run([me.extensions.man.path, file], {noshow: true})
                        file.replaceExt('txt').write(response.replace(/.\b/g, ''))
                        let cmd = Cmd([me.extensions.man2html.path, '-u'], {detach: true})
                        cmd.write(response)
                        cmd.finalize()
                        file.replaceExt('html').write(cmd.response)
                    }
                }
            ",
        },

        ssi: {
            action: "
                if (me.extensions.dsi.path) {
                    if (!me.dir.src.join('doc/dsi').exists) {
                        trace('Skip', 'No server side includes')
                    } else {
                        trace('Process', 'Html server side includes (dsi)')
                        let doc = me.dir.src.join('doc')
                        for each (file in ls('${SRC}/doc/**.html')) {
                            file = file.relativeTo(doc)
                            vtrace('Patch', file)
                            run([me.extensions.dsi.path, file], {dir: doc})
                        }
                    }
                } else {
                    trace('Skip', 'ssi bacause ' + me.extensions.dsi.diagnostic)
                }
            ",
        },

        tidy: {
            depends: ['doc', 'ssi'],
            enable: false,
            action: "
                if (me.extensions.dsi.path) {
                    trace('Tidy', 'HTML doc')
                    let doc = me.dir.src.join('doc')
                    for each (file in ls('${SRC}/doc/**html')) {
                        trace('Tidy', file)
                        file = file.relativeTo(doc)
                        run(me.extensions.tidy.path + ' -q -config tidy.conf ' + file)
                    }
                } else {
                    trace('Skip', 'tidy bacause ' + me.extensions.dsi.diagnostic)
                }
            ",
        },
    },
})
